generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String?   @unique
  phone     String    @unique
  avatar    String?
  role      Role      @default(USER)
  isVerified Boolean  @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  properties Property[]
  bookings   Booking[]
  reviews    Review[]
  otpCodes   OtpCode[]
}

model OtpCode {
  id        String   @id @default(cuid())
  phone     String
  code      String
  type      OtpType
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@index([phone, type])
}

model Property {
  id          String    @id @default(cuid())
  title       String
  description String
  address     String
  city        String
  state       String
  stateId     String    // Reference to state ID from locations data
  district    String
  districtId  String    // Reference to district ID from locations data
  pincode     String
  
  // Room availability counts
  singleRooms    Int @default(0)
  doubleRooms    Int @default(0)
  tripleRooms    Int @default(0)
  quadRooms      Int @default(0)
  
  // Pricing for different room types
  singlePrice    Float @default(0)
  doublePrice    Float @default(0)
  triplePrice    Float @default(0)
  quadPrice      Float @default(0)
  
  deposit     Float
  amenities   String[]
  images      String[]
  
  // Legacy fields for backward compatibility
  type        RoomType @default(SINGLE)
  capacity    Int      @default(1)
  price       Float    @default(0)
  
  rating      Float     @default(0)
  reviewCount Int       @default(0)
  available   Boolean   @default(true)
  featured    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  owner     User      @relation(fields: [ownerId], references: [id])
  ownerId   String
  bookings  Booking[]
  reviews   Review[]
  
  @@index([stateId, districtId])
  @@index([city, state])
}

model Booking {
  id            String        @id @default(cuid())
  startDate     DateTime
  endDate       DateTime
  roomType      RoomType      // Which type of room was booked
  totalAmount   Float
  status        BookingStatus @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
}

enum Role {
  USER
  OWNER
  ADMIN
}

enum RoomType {
  SINGLE
  DOUBLE
  TRIPLE
  QUAD
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum OtpType {
  LOGIN
  SIGNUP
  FORGOT_PASSWORD
}